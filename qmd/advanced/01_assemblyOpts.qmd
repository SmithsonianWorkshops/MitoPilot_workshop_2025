---
title: "01 - assembly alternatives"
---

## MitoFinder

By default, MitoPilot uses [GetOrganlle](https://github.com/Kinggerm/GetOrganelle) to assembly the mitochondrial genome.
GetOrganelle will only assemble a subset of your reads which it identifies as mitochondrial. 
This makes it a very fast assembler and that tends to work best if you have a sufficient reference database (more on that later).
However, there may be cases where GetOrganlle produces unsatisfactory results.

If you wish to try a different assembly method, we have also implemented [MitoFinder](https://github.com/RemiAllio/MitoFinder) in MitoPilot.
Unlike GetOrganlle, MitoFinder performs a complete assembly of all your reads using [MEGAHIT](https://github.com/voutcn/megahit), [MetaSPAdes](https://github.com/ablab/spades), or [IDBA-UB](https://github.com/loneknightpy/idba).
This makes it far slower, but can sometimes be more effective for organisms with poor reference databases.

MitoFinder can be selected as the assembler in the `Assembly Opts.` window of the Assemble module.

![Fig. 1](/images/advanced/01.png)

By default, we have configured MitoFinder to use MEGAHIT for assembly and the Zebrafish (_Danio rerio_) reference mitochondrial genome. 
You can easily supply your own reference mitogenome(s) by specifying the full path to a GenBank formatted (.gb) file.

## Importing External Assemblies

In some cases, GetOrganelle and MitoFinder can both fail to produce mitochondrial genome assemblies.
You may wish to explore other assembly options outside of MitoPilot, such as the Geneious ["map to reference"](https://manual.geneious.com/en/latest/AssemblyMapping.html#map-to-reference) method.

If you still want to use MitoPilot for annotation and curation, you can import mitochondrial genome assemblies.
To do so, you will need to initialize a new MitoPilot project. 
You cannot have a single project containing assemblies generated by the external software and assemblies generated by MitoPilot.

To set up a project with external assemblies, use the [`new_project_userAsmb`](https://smithsonian.github.io/MitoPilot/reference/new_project_userAsmb.html) function. 
This function requires the argument `assembly_path`, which is the full path to the directory containing all of your mitogenome assemblies.

The `new_project_userAsmb` function also requires two new columns in the mapping file:
- `Assembly`: mitogenome assembly FASTA file names (one contig/scaffold sequence per sample) 
- `Topology`: information about the assembly topology ("circular" or "linear")

Once you have created a new project with this function, you can proceed to open the GUI and run MitoPilot. 
Note that you will still need to run the Assemble module.
This module will only be used to generate read coverage maps for your assemblies.




