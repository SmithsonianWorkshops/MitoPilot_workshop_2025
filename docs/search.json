[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to the website for the 2025 Smithsonian NMNH MitoPilot workshop!"
  },
  {
    "objectID": "qmd/example_project/03_asmb.html",
    "href": "qmd/example_project/03_asmb.html",
    "title": "03 - assembly",
    "section": "",
    "text": "Once MitoPilot finishes the Assemble workflow, the sample table should be updated with new information.\n\n\n\nFig. 19\n\n\nIf you want to locate the results files for a sample, click output. This will open the appropriate folder in the Files pane of your RStudio session.\n\n\n\nFig. 20\n\n\nYou can also view the results within the MitoPilot GUI. For example, select SRR21843972 (Stomias affinis), then click details. This will open a new window with the mitogenome sequence.\n\n\n\nFig. 21\n\n\nSelect the sequence and click the Fasta button in the bottom right. This will copy the FASTA formatted mitogenome to your clipboard, which you can paste into your favorite text editor. This could be useful for a quick BLAST search.\n\n\n\nFig. 22\n\n\nYou can also click the view button, which will open a summary figure in a new tab, including mean read depth, sequence error rate, and GC content.\n\n\n\nFig. 23\n\n\nNotice that in this figure, read depth drops off dramatically at both ends of the sequence. SRR21843972 was unable to assemble a circular mitogenome due to poor read coverage in this region. To assemble a circular mitogenome, you could try running the Assemble module again with different GetOrganelle settings (see their Wiki), try the MitoFinder assembler, or get more sequence data.",
    "crumbs": [
      "Example Project",
      "03 - assembly"
    ]
  },
  {
    "objectID": "qmd/example_project/03_asmb.html#inspecting-assembly-results",
    "href": "qmd/example_project/03_asmb.html#inspecting-assembly-results",
    "title": "03 - assembly",
    "section": "",
    "text": "Once MitoPilot finishes the Assemble workflow, the sample table should be updated with new information.\n\n\n\nFig. 19\n\n\nIf you want to locate the results files for a sample, click output. This will open the appropriate folder in the Files pane of your RStudio session.\n\n\n\nFig. 20\n\n\nYou can also view the results within the MitoPilot GUI. For example, select SRR21843972 (Stomias affinis), then click details. This will open a new window with the mitogenome sequence.\n\n\n\nFig. 21\n\n\nSelect the sequence and click the Fasta button in the bottom right. This will copy the FASTA formatted mitogenome to your clipboard, which you can paste into your favorite text editor. This could be useful for a quick BLAST search.\n\n\n\nFig. 22\n\n\nYou can also click the view button, which will open a summary figure in a new tab, including mean read depth, sequence error rate, and GC content.\n\n\n\nFig. 23\n\n\nNotice that in this figure, read depth drops off dramatically at both ends of the sequence. SRR21843972 was unable to assemble a circular mitogenome due to poor read coverage in this region. To assemble a circular mitogenome, you could try running the Assemble module again with different GetOrganelle settings (see their Wiki), try the MitoFinder assembler, or get more sequence data.",
    "crumbs": [
      "Example Project",
      "03 - assembly"
    ]
  },
  {
    "objectID": "qmd/example_project/03_asmb.html#problematic-samples",
    "href": "qmd/example_project/03_asmb.html#problematic-samples",
    "title": "03 - assembly",
    "section": "Problematic Samples",
    "text": "Problematic Samples\nIn this test dataset, there are two problematic samples which returned failed states. You can see which samples failed by looking for the exclamation mark state icon. Selecting a sample with that icon and clicking on the STATE button will confirm.\n\n\n\nFig. 24\n\n\nOne failed sample is SRR22396758 (Upeneus parvus). We purposefully truncated the data for this sample to contain only 200 reads.\nWith so few reads, this sample failed to meet the min_depth threshold and returned a message “Insufficient sequencing depth” in the Notes column. When analyzing your own data, you can specify the min_depth threshold with the MitoPilot::new_project() function.\nThe other failed sample is SRR21844202 (Fundulus majalis). This sample had plenty of data and we were able to assemble a mitogenome. However, the message in the Notes columns says “Unable to resolve single assembly from reads.”\nGetOrganelle produced two alternate assembly paths for this sample. This is usually due to complicated assembly graphs near a repeat region. Please refer to the GetOrganlle paper for more information about multiple assembly paths.\nLet’s take a peek at SRR21844202 (Fundulus majalis). Select the sample, scroll all the way to the right, and click on details.\n\n\n\nFig. 25\n\n\nWe can see two assemblies listed here. Clicking on view will show us the coverage, error, and GC content graphs for each assembly.\nPath #1\n\n\n\nFig. 26\n\n\nPath #2\n\n\n\nFig. 27\n\n\nThe two assembly paths differ slightly around 13,000 bp.\nWe can chose to move forward with just one assembly path by clicking the “ignore” button for one of the assembly paths.\nAlternatively, we can use the consensus sequence. Select both paths and click the Align button in the bottom right. The sequence alignment will pop up, showing us that the two paths have 99.9897% sequence similarity.\nIf we scroll through the alignment, we can see a few base pair differences.\n\n\n\nFig. 28\n\n\nSelecting Trim Consensus will remove any conflicting regions of the aligned assembly paths and produce a shorter consensus sequence of both alignments. Doing so will automatically ignore the original two assembly paths.\n\n\n\nFig. 29\n\n\nClick close and return to the samples table. You will see that the # Paths column for SRR21844202 is highlighted and there is a note indicating that the assembly was edited. This sample has also been automatically changed to a locked state.\n\n\n\nFig. 30\n\n\n\n\n\n\n\n\nImportant\n\n\n\nCarefully consider your options for samples with multiple assembly paths. You may wish to align each assembly against a reference or compare depth of sequencing coverage. There is no one-size-fits-all solution.\n\n\nTo proceed to the Annotate module, we need to lock the successful samples in the Assemble module. Select all of the samples except SRR22396758 (Upeneus parvus) and click the LOCK button. Then use the dropdown menu in the top left to navigate to the Annotate module.\n\n\n\nFig. 31",
    "crumbs": [
      "Example Project",
      "03 - assembly"
    ]
  },
  {
    "objectID": "qmd/example_project/04_annotation.html",
    "href": "qmd/example_project/04_annotation.html",
    "title": "04 - annotation",
    "section": "",
    "text": "We can now move on to the Annotate pipeline module. This module consists of an annotation step using Mitos2 and tRNAscan-SE, a taxon-specific curation step to refine the annotation models, and a validation step to flag possible issues or known errors that would be rejected by NCBI GenBank.\nUse the dropdown menu in the top left and select Annotate.\nLet’s edit the Annotate Opts and increase the memory allocation to 60 GB. In this window, you could also edit the Mitos2 and tRNAscan-SE options. In the future, we will allow users to specify custom reference databases for annotation.\n\n\n\nFig. 32\n\n\nYou can also edit the curation options. For the test dataset, the default fish_mito options are fine, but let’s increase the memory to 24 Gb.\nIn the curation options window, you can see all of the complex rules that will be applied when MitoPilot performs automatic curation of the annotation results. For example, here are the allowed stop codons for protein-coding genes.\n\n\n\nFig. 33\n\n\nTo run the Annotate module, you can use either approach described in the previous Nextflow section. Let’s use the GUI method.\n\n\n\nFig. 34\n\n\nOnce all steps are complete, the gears will stop spinning and you’ll see a summary message printed at the bottom of the Progress window. Click Close to return to the sample table.",
    "crumbs": [
      "Example Project",
      "04 - annotation"
    ]
  },
  {
    "objectID": "qmd/example_project/04_annotation.html#running-the-annotate-module",
    "href": "qmd/example_project/04_annotation.html#running-the-annotate-module",
    "title": "04 - annotation",
    "section": "",
    "text": "We can now move on to the Annotate pipeline module. This module consists of an annotation step using Mitos2 and tRNAscan-SE, a taxon-specific curation step to refine the annotation models, and a validation step to flag possible issues or known errors that would be rejected by NCBI GenBank.\nUse the dropdown menu in the top left and select Annotate.\nLet’s edit the Annotate Opts and increase the memory allocation to 60 GB. In this window, you could also edit the Mitos2 and tRNAscan-SE options. In the future, we will allow users to specify custom reference databases for annotation.\n\n\n\nFig. 32\n\n\nYou can also edit the curation options. For the test dataset, the default fish_mito options are fine, but let’s increase the memory to 24 Gb.\nIn the curation options window, you can see all of the complex rules that will be applied when MitoPilot performs automatic curation of the annotation results. For example, here are the allowed stop codons for protein-coding genes.\n\n\n\nFig. 33\n\n\nTo run the Annotate module, you can use either approach described in the previous Nextflow section. Let’s use the GUI method.\n\n\n\nFig. 34\n\n\nOnce all steps are complete, the gears will stop spinning and you’ll see a summary message printed at the bottom of the Progress window. Click Close to return to the sample table.",
    "crumbs": [
      "Example Project",
      "04 - annotation"
    ]
  },
  {
    "objectID": "qmd/example_project/04_annotation.html#exploring-annotation-results",
    "href": "qmd/example_project/04_annotation.html#exploring-annotation-results",
    "title": "04 - annotation",
    "section": "Exploring Annotation Results",
    "text": "Exploring Annotation Results\nThere are a LOT of results to explore from the Annotate module. The sample table reports some basic stats about the number of protein-coding genes (PCGs), tRNAs, and rRNAs. The missing column reports which mitochondrial genes were not annotated (based on the provided curation model). The extra column notes the number of potentially duplicated genes.\nLastly, the warnings column indicates how many warning flags were raised during the validation step. Samples with many warnings will require more manual curation to ensure that they are not rejected upon submission to NCBI GenBank. Warning messages are explained in further detail here.\n\n\n\nFig. 35\n\n\nThe annotation results for each sample can be examined more closely by clicking the details button. First, let’s examine the details for a good sample, SRR19434536 (Rhinecanthus rectangulus).\n\n\n\nFig. 36\n\n\nThis sample has the expected number of genes and no warnings. However, the notes column shows that MitoPilot still made some tweaks to the annotation during the curation step. For example, the start position of rRNA rrnL was moved 22 bp upstream and the stop codon for NAD2 was trimmed by 2 bp.\nNucleotide sequences (and amino acid sequence for PCGs) can be copied to the clipboard using the nt (and aa) buttons on the far right. This could be helpful if you’d like to manually BLAST some genes.\nClicking on the Coverage Map button will show a plot of sequence depth, zooming to the position of the highlighted gene. The colored bars representing the genes are transparent, allowing you to spot overlapping gene models that may need manual adjustment.\n\n\n\nFig. 37\n\n\nFor protein-coding genes, you can click the Alignment button to show the protein alignment of your annotated gene against a reference database. Currently, this shows only the top BLAST hits from the curation process, which may be one or more sequences.\n\n\n\nFig. 38\n\n\nIf you would like to use your own custom BLAST database, you can check the Local blast box. MitoPilot will return a message with instructions to run options('MitoPilot.local.db' = '/path/to/local/blastp/db') within your RStudio session. You will need to restart the MitoPilot GUI for this change to take effect.",
    "crumbs": [
      "Example Project",
      "04 - annotation"
    ]
  },
  {
    "objectID": "qmd/example_project/04_annotation.html#editing-annotation-results",
    "href": "qmd/example_project/04_annotation.html#editing-annotation-results",
    "title": "04 - annotation",
    "section": "Editing Annotation Results",
    "text": "Editing Annotation Results\nMitoPilot offers some basic functions to manually edit your annotation results. Let’s open the alignment for the SRR19434536 (Rhinecanthus rectangulus) “cox1” gene. Clicking the EDIT button brings up a few options to change the start and stop position annotation.\nTry clicking the + button next to START. You should see that the “cox1 (focal)” sequence start position has shifted.\n\n\n\nFig. 39\n\n\nThis is clearly a worse alignment. Click RESET to undo your changes.\nIf the alignment view contains many sequences, manual editing will be slow since MitoPilot has to redo the alignment every time you adjust a codon position. To speed this up, you can select the Align fewer refs box. This will restrict the alignment to the top five BLAST hits.\nBelow the alignment section you will find the Notes. Use this section to keep track of your manual edits. Anything you write here will be saved automatically.\n\n\n\nFig. 40\n\n\nAt the bottom of the window are several buttons. You can completely remove annotations by selecting them and clicking Delete. Use this feature with caution, as there’s no easy way to add the annotation back without running the sample through the Annotate module again.\nThe Linearize button will convert a circular assembly to a linear assembly. This may be useful if the D-loop region was poorly assmebled or annotated.\nYou can use the Toggle reviewed button to change the state of the Reviewed column, which may be helpful for tracking the progress of your manual edits. Likewise, we have provided Toggle ID verified and Toggle problematic buttons to help track the status of your samples.\nAnnotation editing can be a bit temperamental and you may encounter bugs. Please report any problems on the MitoPilot GitHub issues page.\nTry playing around with the manual editing on your own. There are many different types of warning messages, not all of which can be fixed within MitoPilot.\n\n\n\n\n\n\nNote\n\n\n\nWarning messages will not disappear, even after you fix the error with manual edits.\n\n\nOnce you are done, select all of the samples and click the LOCK button to prepare for the Export module.",
    "crumbs": [
      "Example Project",
      "04 - annotation"
    ]
  },
  {
    "objectID": "qmd/example_project/05_export.html",
    "href": "qmd/example_project/05_export.html",
    "title": "05 - export",
    "section": "",
    "text": "Let’s move to the final step of the pipeline: the Export module. This module allows you to create groups of samples, then generate alignments and files formatted for submission to GenBank.\nUse the dropdown menu in the top left to navigate to the Export module.\nNow let’s create a group of samples. Sort the samples table by clicking on the Taxon column, then select the first five samples and click the GROUP button.\nA new window will appear showing some summary information for the selected samples. Type a name for the group, click Add.., then click Create. You can then click Close to return to the sample table.\n\n\n\nFig. 41\n\n\nThe sample table now shows the group assignment in the Group column.\n\n\n\nFig. 42\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou can assign new samples to an existing group. Simply select the samples you wish to add, click GROUP, then choose the existing group from the dropdown menu.\n\n\n\n\n\n\n\n\nNote\n\n\n\nEach sample can only belong to one group at a time. MitoPilot will produce a warning message if you attempt to re-assign a sample to a new group.\n\n\n\n\n\n\n\n\nNote\n\n\n\nCurrently, MitoPilot does not allow you to re-export an group name. You will have to create a new group if you wish to export certain samples again.\n\n\nWe can proceed to exporting the data for this group. Click EXPORT DATA, which will open a new window. Only samples that have been added to a group can be exported in this manner.\n\n\n\nFig. 43\n\n\nIf you have multiple groups, you can select the appropriate one from the dropdown menu.\nMitoPilot allows you to create a custom FASTA header for your samples, pulling data from columns in the CSV file you supplied with the mapping_fn argument of the MitoPilot::new_project function. This conveniently allows you to include metadata required for submission to NCBI GenBank. To reference a column, use curly brackets. For example organism={Taxon} will autofill values in the “Taxon” column into the FASTA header.\nFor this test project, we can leave the Fasta Header Template at the default value.\nThe Generate Group-level PCG alignment summary will run alignments of all the protein-coding genes in your group. For large groups, this can take a while. But it’s useful for a final quality control check.\nLet’s toggle the Export individual genes button. This will generate additional FASTA files and GenBank feature tables for each protein-coding gene. This can be helpful if you want to use individual genes for phylogenetic analyses or submit them to GenBank. These gene FASTA files have their own custom header template that you can modify.\nClick Export to generate the final files. It may take a couple of minutes, but as long as the gears are spinning, MitoPilot is still running.\nOnce complete, MitoPilot will print the location of the exported files. By default, that location is YOUR_PROJECT_DIRECTORY/out/export/YOUR_GROUP_NAME.\n\n\n\nFig. 44\n\n\nYou can download these files from Hydra or open them from the RStudio server session.",
    "crumbs": [
      "Example Project",
      "05 - export"
    ]
  },
  {
    "objectID": "qmd/example_project/05_export.html#running-the-export-module",
    "href": "qmd/example_project/05_export.html#running-the-export-module",
    "title": "05 - export",
    "section": "",
    "text": "Let’s move to the final step of the pipeline: the Export module. This module allows you to create groups of samples, then generate alignments and files formatted for submission to GenBank.\nUse the dropdown menu in the top left to navigate to the Export module.\nNow let’s create a group of samples. Sort the samples table by clicking on the Taxon column, then select the first five samples and click the GROUP button.\nA new window will appear showing some summary information for the selected samples. Type a name for the group, click Add.., then click Create. You can then click Close to return to the sample table.\n\n\n\nFig. 41\n\n\nThe sample table now shows the group assignment in the Group column.\n\n\n\nFig. 42\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou can assign new samples to an existing group. Simply select the samples you wish to add, click GROUP, then choose the existing group from the dropdown menu.\n\n\n\n\n\n\n\n\nNote\n\n\n\nEach sample can only belong to one group at a time. MitoPilot will produce a warning message if you attempt to re-assign a sample to a new group.\n\n\n\n\n\n\n\n\nNote\n\n\n\nCurrently, MitoPilot does not allow you to re-export an group name. You will have to create a new group if you wish to export certain samples again.\n\n\nWe can proceed to exporting the data for this group. Click EXPORT DATA, which will open a new window. Only samples that have been added to a group can be exported in this manner.\n\n\n\nFig. 43\n\n\nIf you have multiple groups, you can select the appropriate one from the dropdown menu.\nMitoPilot allows you to create a custom FASTA header for your samples, pulling data from columns in the CSV file you supplied with the mapping_fn argument of the MitoPilot::new_project function. This conveniently allows you to include metadata required for submission to NCBI GenBank. To reference a column, use curly brackets. For example organism={Taxon} will autofill values in the “Taxon” column into the FASTA header.\nFor this test project, we can leave the Fasta Header Template at the default value.\nThe Generate Group-level PCG alignment summary will run alignments of all the protein-coding genes in your group. For large groups, this can take a while. But it’s useful for a final quality control check.\nLet’s toggle the Export individual genes button. This will generate additional FASTA files and GenBank feature tables for each protein-coding gene. This can be helpful if you want to use individual genes for phylogenetic analyses or submit them to GenBank. These gene FASTA files have their own custom header template that you can modify.\nClick Export to generate the final files. It may take a couple of minutes, but as long as the gears are spinning, MitoPilot is still running.\nOnce complete, MitoPilot will print the location of the exported files. By default, that location is YOUR_PROJECT_DIRECTORY/out/export/YOUR_GROUP_NAME.\n\n\n\nFig. 44\n\n\nYou can download these files from Hydra or open them from the RStudio server session.",
    "crumbs": [
      "Example Project",
      "05 - export"
    ]
  },
  {
    "objectID": "qmd/example_project/05_export.html#exploring-the-final-results",
    "href": "qmd/example_project/05_export.html#exploring-the-final-results",
    "title": "05 - export",
    "section": "Exploring the Final Results",
    "text": "Exploring the Final Results\nMitoPilot will produce three output files. First, the .html file contains visualizations of each protein-coding gene alignment in your export group. This may be useful to quickly identify samples with poor annotations that need additional manual curation.\n\n\n\nFig. 45\n\n\nFor example, the ATP8 annotation for “SRR22396640” clearly stands out when compared with the other samples in this export group.\n\n\n\nFig. 46\n\n\nNext are the two files you will need for submission to NCBI GenBank. The .fasta file contains the mitogenome assemblies for each sample, following the header template you specified when exporting the data.\n\n\n\nFig. 47\n\n\nAdditionally there is the .tbl file, a standardized 5-column, tab-delimited feature table containing information about the annotated genes for each mitogenome.\n\n\n\nFig. 48\n\n\nWith a real dataset, you could use these two files for submission to NCBI GenBank.\nThe export directory also contains a sub-directory GFFs with annotations for each sample in GFF3 format. GFF files can be loaded by tools like Geneious for additional manual inspection prior to submission.\n\n\n\nFig. 49\n\n\nLastly, if you selected the Export individual genes option, there will be another directory genes containing sub-directories for every protein-coding and rRNA gene. In these you will find FASTA files and feature tables for the corresponding gene. There will also be a concatenated FASTA file and feature table containing all protein-coding genes, named GROUP_PCGs.fasta/tbl.\n\n\n\nFig. 50",
    "crumbs": [
      "Example Project",
      "05 - export"
    ]
  },
  {
    "objectID": "qmd/example_project/05_export.html#wrap-up",
    "href": "qmd/example_project/05_export.html#wrap-up",
    "title": "05 - export",
    "section": "Wrap-up",
    "text": "Wrap-up\nCongratulations, you’ve reached the end of the test project tutorial! Hopefully you now have a solid understanding of the MitoPilot interface and can begin to analyze and explore your own mitogenome datasets.",
    "crumbs": [
      "Example Project",
      "05 - export"
    ]
  },
  {
    "objectID": "qmd/full_R_script/R-script.html",
    "href": "qmd/full_R_script/R-script.html",
    "title": "MitoPilot R Script",
    "section": "",
    "text": "# SI NMNH MitoPilot workshop\n# June 13, 2025\n# https://dmacguigan.github.io/MitoPilot_workshop_2025/\n# author: Dan MacGuigan\n# macguigand@si.edu\n\n###########################################################################\n# Install MitoPilot\n###########################################################################\n\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n    install.packages(\"remotes\")\n}\nif (!requireNamespace(\"BiocManager\", quietly = TRUE)) {\n    install.packages(\"BiocManager\")\n}\nBiocManager::install(\"Smithsonian/MitoPilot\")\n\n###########################################################################\n# Update MitoPilot (if needed)\n###########################################################################\n\nremove.packages(\"MitoPilot\")\nBiocManager::install(\"Smithsonian/MitoPilot\")\n.rs.restartR()\n\n###########################################################################\n# Load MitoPilot\n###########################################################################\n\n# modify PATH to include:\n#   ~/bin (contains nextflow exe)\n#   java 21.0.2 (required for nextflow)\ndefault_path &lt;- \"/cm/shared/apps/uge/8.8.1/bin/lx-amd64:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/usr/lib/rstudio-server/bin/quarto/bin:/usr/lib/rstudio-server/bin/postback\"\nnew_path &lt;- paste0(Sys.getenv(\"HOME\"), \"/bin:/share/apps/tools/java/21.0.2/bin\")\nSys.setenv(PATH = paste(new_path, default_path, sep = \":\"))\n\n# load MitoPilot package\nlibrary(MitoPilot)\n\n###########################################################################\n# Initialize test project\n###########################################################################\n\n# specify the directory where your test project will be created\n# if the directory does not exist, MitoPilot will create it\nwd &lt;- \"/pool/public/genomics/macguigand/MitoPilot/NMNH_workshop_2025-06-13/test_project_01\"\n\n# specify an execution environment, \"local\", \"NMNH_Hydra\", or \"NOAA_SEDNA\"\nex &lt;- \"NMNH_Hydra\"\n\n# initialize the test project\nMitoPilot::new_test_project(\n    path = wd,\n    executor = ex,\n    full_size = FALSE,\n    Rproj = FALSE\n)\n\n###########################################################################\n# Launch the MitoPilot GUI\n###########################################################################\n\n# the function to launch the GUI\n# must be called from within your project directory\nwd &lt;- \"/pool/public/genomics/macguigand/MitoPilot/NMNH_workshop_2025-06-13/test_project_01\"\nsetwd(wd)\nMitoPilot::MitoPilot()",
    "crumbs": [
      "MitoPilot R Script"
    ]
  },
  {
    "objectID": "qmd/setup/03_RIntro.html",
    "href": "qmd/setup/03_RIntro.html",
    "title": "03 - intro to R",
    "section": "",
    "text": "R is a free software environment for statistical computing and graphics. MitoPilot does not require the user to be an expert in R, as MitoPilot mostly utilizes a custom graphical user interface (GUI).\nHowever, if you wish to learn the basics of R, there are many online resources:\n\nSmithsonian LAB R workshop\nData Carpentry R workshop",
    "crumbs": [
      "Setup",
      "03 - intro to R"
    ]
  },
  {
    "objectID": "qmd/setup/04_install.html",
    "href": "qmd/setup/04_install.html",
    "title": "04 - MitoPilot installation",
    "section": "",
    "text": "To install MitoPilot, use the RStudio server window to run the following. This might take a while.\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n    install.packages(\"remotes\")\n}\nif (!requireNamespace(\"BiocManager\", quietly = TRUE)) {\n    install.packages(\"BiocManager\")\n}\nBiocManager::install(\"Smithsonian/MitoPilot\")\nYou may see a warning like this:\nInstallation paths not writeable, unable to update packages\n  path: /share/apps/bioinformatics/R/4.4.1/lib64/R/library\nThis is not a problem. Some R packages are installed at the Hydra system level and cannot be updated by the user.\nIf there were no other error messages, you’re ready to start using MitoPilot!",
    "crumbs": [
      "Setup",
      "04 - MitoPilot installation"
    ]
  },
  {
    "objectID": "qmd/setup/04_install.html#first-time-installation",
    "href": "qmd/setup/04_install.html#first-time-installation",
    "title": "04 - MitoPilot installation",
    "section": "",
    "text": "To install MitoPilot, use the RStudio server window to run the following. This might take a while.\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n    install.packages(\"remotes\")\n}\nif (!requireNamespace(\"BiocManager\", quietly = TRUE)) {\n    install.packages(\"BiocManager\")\n}\nBiocManager::install(\"Smithsonian/MitoPilot\")\nYou may see a warning like this:\nInstallation paths not writeable, unable to update packages\n  path: /share/apps/bioinformatics/R/4.4.1/lib64/R/library\nThis is not a problem. Some R packages are installed at the Hydra system level and cannot be updated by the user.\nIf there were no other error messages, you’re ready to start using MitoPilot!",
    "crumbs": [
      "Setup",
      "04 - MitoPilot installation"
    ]
  },
  {
    "objectID": "qmd/setup/04_install.html#updating-mitopilot",
    "href": "qmd/setup/04_install.html#updating-mitopilot",
    "title": "04 - MitoPilot installation",
    "section": "Updating MitoPilot",
    "text": "Updating MitoPilot\nIf you need to update MitoPilot, run the following commands in RStudio server.\nremove.packages(\"MitoPilot\")\nBiocManager::install(\"Smithsonian/MitoPilot\")\n.rs.restartR()\nThis will remove the old package, install the most recent version, and restart your R session. After updating, you will need to reload the package with library(MitoPilot).\nWe also recommend clearing your Singularity cache with singularity cache clean whenever you update MitoPilot. This will ensure you are using the latest MitoPilot Singularity image.",
    "crumbs": [
      "Setup",
      "04 - MitoPilot installation"
    ]
  },
  {
    "objectID": "qmd/HPC_intro/HPC-intro.html",
    "href": "qmd/HPC_intro/HPC-intro.html",
    "title": "Intro to Smithsonian HPC",
    "section": "",
    "text": "Intro slides: Download PDF file.",
    "crumbs": [
      "Intro to Smithsonian HPC"
    ]
  },
  {
    "objectID": "qmd/your_project/02_init.html",
    "href": "qmd/your_project/02_init.html",
    "title": "02 - initialize your project",
    "section": "",
    "text": "First we need to specify a number of parameters for the project.\n# directory where your test project will be created\n# if the directory does not exist, MitoPilot will create it\nwd &lt;- \"/pool/public/genomics/&lt;&lt;USER&gt;&gt;/MitoPilot_workshop/my_project/run_01\"\n\n# full path to your sample mapping CSV file\n# swap &lt;&lt;USER&gt;&gt; for your user ID\nmap_file &lt;- \"/pool/public/genomics/&lt;&lt;USER&gt;&gt;/MitoPilot_workshop/my_project/run_01/map_file.csv\"\n\n# full path to your sequence data directory\n# swap &lt;&lt;USER&gt;&gt; for your user ID\nseq_data &lt;- \"/pool/public/genomics/&lt;&lt;USER&gt;&gt;/MitoPilot_workshop/my_project/run_01/seq_data\"\n\n# genetic code for your samples\n# see https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi\ngenetic_code &lt;- 2\n\n# minimum number of reads required to process a sample\nmin_reads &lt;- 1000000\n\n# specify an execution environment, \"local\", \"NMNH_Hydra\", or \"NOAA_SEDNA\"\nex &lt;- \"NMNH_Hydra\"\nNow we can initialize the project using those parameters.\n# load the MitoPilot package\nlibrary(MitoPilot)\n\n# initialize the test project\nMitoPilot::new_project(\n    path = wd,\n    executor = ex,\n    mapping_fn = map_file,\n    genetic_code = genetic_code,\n    min_depth = min_reads,\n    data_path = seq_data,\n    Rproj = FALSE\n)\nNow we’re ready to launch the GUI and start processing our samples!\n# the function to launch the GUI \n# must be called from within your project directory\nsetwd(wd)\nMitoPilot::MitoPilot()",
    "crumbs": [
      "Starting Your Own Project",
      "02 - initialize your project"
    ]
  },
  {
    "objectID": "qmd/advanced/01_assemblyOpts.html",
    "href": "qmd/advanced/01_assemblyOpts.html",
    "title": "01 - assembly alternatives",
    "section": "",
    "text": "By default, MitoPilot uses GetOrganlle to assembly the mitochondrial genome. GetOrganelle will only assemble a subset of your reads which it identifies as mitochondrial. This makes it a very fast assembler and that tends to work best if you have a sufficient reference database (more on that later). However, there may be cases where GetOrganlle produces unsatisfactory results.\nIf you wish to try a different assembly method, we have also implemented MitoFinder in MitoPilot. Unlike GetOrganlle, MitoFinder performs a complete assembly of all your reads using MEGAHIT, MetaSPAdes, or IDBA-UB. This makes it far slower, but can sometimes be more effective for organisms with poor reference databases.\nMitoFinder can be selected as the assembler in the Assembly Opts. window of the Assemble module.\n\n\n\nFig. 1\n\n\nBy default, we have configured MitoFinder to use MEGAHIT for assembly and the Zebrafish (Danio rerio) reference mitochondrial genome. You can easily supply your own reference mitogenome(s) by specifying the full path to a GenBank formatted (.gb) file.",
    "crumbs": [
      "Advanced Usage",
      "01 - assembly alternatives"
    ]
  },
  {
    "objectID": "qmd/advanced/01_assemblyOpts.html#mitofinder",
    "href": "qmd/advanced/01_assemblyOpts.html#mitofinder",
    "title": "01 - assembly alternatives",
    "section": "",
    "text": "By default, MitoPilot uses GetOrganlle to assembly the mitochondrial genome. GetOrganelle will only assemble a subset of your reads which it identifies as mitochondrial. This makes it a very fast assembler and that tends to work best if you have a sufficient reference database (more on that later). However, there may be cases where GetOrganlle produces unsatisfactory results.\nIf you wish to try a different assembly method, we have also implemented MitoFinder in MitoPilot. Unlike GetOrganlle, MitoFinder performs a complete assembly of all your reads using MEGAHIT, MetaSPAdes, or IDBA-UB. This makes it far slower, but can sometimes be more effective for organisms with poor reference databases.\nMitoFinder can be selected as the assembler in the Assembly Opts. window of the Assemble module.\n\n\n\nFig. 1\n\n\nBy default, we have configured MitoFinder to use MEGAHIT for assembly and the Zebrafish (Danio rerio) reference mitochondrial genome. You can easily supply your own reference mitogenome(s) by specifying the full path to a GenBank formatted (.gb) file.",
    "crumbs": [
      "Advanced Usage",
      "01 - assembly alternatives"
    ]
  },
  {
    "objectID": "qmd/advanced/01_assemblyOpts.html#importing-external-assemblies",
    "href": "qmd/advanced/01_assemblyOpts.html#importing-external-assemblies",
    "title": "01 - assembly alternatives",
    "section": "Importing External Assemblies",
    "text": "Importing External Assemblies\nIn some cases, GetOrganelle and MitoFinder can both fail to produce mitochondrial genome assemblies. You may wish to explore other assembly options outside of MitoPilot, such as the Geneious “map to reference” method.\nIf you still want to use MitoPilot for annotation and curation, you can import mitochondrial genome assemblies. To do so, you will need to initialize a new MitoPilot project. You cannot have a single project containing assemblies generated by the external software and assemblies generated by MitoPilot.\nTo set up a project with external assemblies, use the new_project_userAsmb function. This function requires the argument assembly_path, which is the full path to the directory containing all of your mitogenome assemblies.\nThe new_project_userAsmb function also requires two new columns in the mapping file: - Assembly: mitogenome assembly FASTA file names (one contig/scaffold sequence per sample) - Topology: information about the assembly topology (“circular” or “linear”)\nOnce you have created a new project with this function, you can proceed to open the GUI and run MitoPilot. Note that you will still need to run the Assemble module. This module will only be used to generate read coverage maps for your assemblies.",
    "crumbs": [
      "Advanced Usage",
      "01 - assembly alternatives"
    ]
  },
  {
    "objectID": "qmd/advanced/02_customAsmbDB.html",
    "href": "qmd/advanced/02_customAsmbDB.html",
    "title": "02 - custom assembly database",
    "section": "",
    "text": "Currently, MitoPilot comes packaged with assembly reference databases for fishes. If you are working on any other taxonomic group, you will need to compile databases of mitochondrial sequences for your clade.",
    "crumbs": [
      "Advanced Usage",
      "02 - custom assembly database"
    ]
  },
  {
    "objectID": "qmd/advanced/02_customAsmbDB.html#why-use-a-custom-assembly-database",
    "href": "qmd/advanced/02_customAsmbDB.html#why-use-a-custom-assembly-database",
    "title": "02 - custom assembly database",
    "section": "",
    "text": "Currently, MitoPilot comes packaged with assembly reference databases for fishes. If you are working on any other taxonomic group, you will need to compile databases of mitochondrial sequences for your clade.",
    "crumbs": [
      "Advanced Usage",
      "02 - custom assembly database"
    ]
  },
  {
    "objectID": "qmd/advanced/02_customAsmbDB.html#build-custom-databases-for-getorganelle",
    "href": "qmd/advanced/02_customAsmbDB.html#build-custom-databases-for-getorganelle",
    "title": "02 - custom assembly database",
    "section": "Build custom databases for GetOrganelle",
    "text": "Build custom databases for GetOrganelle\nBefore proceeding, consider reviewing the GetOrganelle paper and documentation to better understand the required database architecture.\nGetOrganelle uses two databases, both in FASTA format:\n\nA “seed” database containing complete (or partial) mitochondrial genomes\nA “label” database containing individual mitochondrial gene sequences\n\n\nGetOrganelle databases on Hydra\nCurrently, we have the following custom GetOrganelle databases available on Hydra at /scratch/nmnh_ocean_dna/GetOrganelle_refDBs:\n\nAnthozoa\nAsteroidea\nCopepoda\nDiptera\nHexacorallia\nLepidosauria\nMammalia\nMetazoa\nOctocorallia\nTestudinata\n\nEach of these folders contains a subdirectory &lt;&lt;DATE&gt;&gt;/refs_final, inside of which are two files: labelDB.fasta and seedDB.fasta. These files consist of all NCBI RefSeq mitogenomes (seeds) and mitochondrial genes (labels) for group.\nIf your group is not listed here, we have provided the following script to assist with this building your own custom database.\n\n\nGenBankDownloadUtil.sh\nThis script will perform a GenBank query for all mitochondrial records matching your search criteria, download those sequences, and sort them into GetOrganlle “seed” and “label” databases.\nBefore proceeding, you will need the following dependencies:\n\nEntrez Direct tools (tested with v22.8)\npython (tested with v3.12.2)\nbiopython (tested with v1.84)\n\nOn the Smithsonian Hydra cluster, python and biopython are available as a module. Simply run module load bio/biopython/1.83.\nDownload the GenBankDownloadUtil.sh script to the directory where you want to create the custom databases. You will also need to download parseGB.py to the same directory.\nTo run the script, you will need to construct an advanced GenBank query. For example, if you want to download all starfish mitochondrial sequences, you could use '\"Asteroidea\"[Organism]'.\nThe script can take multiple search terms. For example, use '\"Percidae\"[Organism] AND \"PRJNA720393\"[BioProject]' to download all percid mitochondrial sequences from a specific BioProject.\n\n\n\n\n\n\nNote\n\n\n\nYou can restrict your results to only NCBI RefSeq by adding the search term \"RefSeq\"[Filter]'. RefSeq is a more curated subset of the data on GenBank, allowing you to avoid poor quality mitogenomes.\n\n\nRun the script as follows, providing your custom search terms. Make sure your full query is in single quotes, each search term is in double quotes, and the query type in in square brackets.\nbash GenBankDownloadUtil.sh '\"my query\"[QueryType]'\nThis may take a while depending on how many GenBank records match your search terms. If working on a computing cluster, we recommend running this script as a batch job. Below is an example submission script for the Hydra cluster.\n\n\n\n\n\n\nNote\n\n\n\nThe submission script below requires the Entrez Direct tools in your PATH (i.e. these tools can be run from any directory).\n\n\n# /bin/sh\n# ----------------Parameters---------------------- #\n#$ -S /bin/sh\n#$ -pe mthread 8\n#$ -q sThM.q\n#$ -l mres=640G,h_data=80G,h_vmem=80G,himem\n#$ -cwd\n#$ -j y\n#$ -N customGetOrgDBs\n#$ -o customGetOrgDBs.log\n\n# script to generate custom seed and label DBs for starfish\n\n# load python and biopython module\nmodule load bio/biopython/1.83 # need python and biopython too\n\n# run the script\nbash GenBankDownloadUtil.sh '\"Asteroidea\"[Organism]'\nThe script will produce several files:\n\ngenbank.gb - GenBank file containing all of the matching records\nmultigene.fasta - FASTA file of sequences that contained multiple gene records, indicating they are either a partial or complete mitogenome\nmultigene.dedup.fasta - same as multigene.fasta, but with duplicate sequences removed\nnogene.fasta - FASTA file of mitochondrial sequences with no annotated genes\nnogene.dedup.fasta - same as nogene.fasta, but with duplicate sequences removed\nsinglegene.fasta - FASTA file of mitochondrial gene sequences\nsinglegene.dedup.fasta - same as singlelocus.fasta, but with duplicate sequences removed\n\nFor GetOrganelle:\n\nseed database = multigene.dedup.fasta (plus maybe some sequences from nogene.dedup.fasta)\nlabel database = singlegene.dedup.fasta\n\nThe nogene.fasta file contains un-annotated mitochondrial sequences or mitochondrial sequences from a non-gene region, such as the D-loop (AKA control region). Consider manually inspecting these sequences. You may wish to include some of them in your custom GetOrganelle seed database.\n\n\nInspecting custom databases\nHere are a few helpful one-liners to inspect and manipulate FASTA files.\nCount the number of sequences in a FASTA file:\ngrep -c \"&gt;\" singlelocus.dedup.fasta\nGenerate list of FASTA headers:\ngrep \"&gt;\" singlelocus.dedup.fasta\nGenerate list of unique gene names:\ngrep \"&gt;\" singlelocus.dedup.fasta | cut -f1 -d\" \" | sort | uniq\nCalculate sequence lengths:\ncat my_file.fasta | awk '$0 ~ \"&gt;\" {if (NR &gt; 1) {print c;} c=0;printf substr($0,2,100) \"\\t\"; } $0 !~ \"&gt;\" {c+=length($0);} END { print c; }'\nExtract specific sequences from a FASTA file with seqkit:\n# Extract sequences based on names.txt\n# names.txt should contain full sequences headers, one per line, but no \"&gt;\" at start\nmodule load bio/seqkit/2.8.1 # ONLY FOR NMNH HYDRA CLUSTER\nseqkit grep -f -n names.txt file.fasta &gt; file_subset.fasta\nRemove sequences from a FASTA file with seqkit:\n# Remove sequences based on name patterns listed in names.txt\n# one pattern per line\nmodule load bio/seqkit/2.8.1 # ONLY FOR NMNH HYDRA CLUSTER\nseqkit grep -v -f names.txt file.fasta &gt; file_subset.fasta\n\n\n\n\n\n\nNote\n\n\n\nGenBankDownloadUtil.sh will rename any sequence with no GenBank “product” (protein, tRNA, or rRNA) as “no_product ACCESSION”. You may wish to remove these sequences, as they often represent poorly annotated genes.\n\n\n\n\nAdding your own sequences to a custom database\nTo use unpublished mitogenomes in a custom GetOrganelle seed database, you will need to combine multiple FASTA files. GetOrganelle does not require any specific format for the sequence names in the seed database.\nYou can easily combine FASTA files with the Linux cat command:\ncat multigene.dedup.fasta my_mitogenomes.fasta more_mitogenomes.fasta &gt; final_seed_db.fasta\nYou could also add unpublished individual gene sequences to a custom GetOrganelle label database in a similar manner.\n\n\nUsing a custom GetOrganelle database with MitoPilot\nTo specify custom GetOrganelle assembly databases, you can use the following arguments when setting up a new project with MitoPilot::new_project.\n\ncustom_seeds_db: full path to custom seeds database FASTA file\ncustom_labels_db: full path to custom labels database FASTA file\n\nAlternatively, you can supply these file paths in the Assembly Opts. window and the Assemble module.\n\n\n\nFig. 2",
    "crumbs": [
      "Advanced Usage",
      "02 - custom assembly database"
    ]
  },
  {
    "objectID": "qmd/advanced/02_customAsmbDB.html#build-custom-databases-for-mitofinder",
    "href": "qmd/advanced/02_customAsmbDB.html#build-custom-databases-for-mitofinder",
    "title": "02 - custom assembly database",
    "section": "Build custom databases for MitoFinder",
    "text": "Build custom databases for MitoFinder\nThe MitoFinder documentation has instructions on how to build a reference database.\nThe MitoFinder reference database is simple: a GenBank formatted file (.gb) containing one or more annotated mitogenomes. This file can be downloaded from a GenBank query in a web browser.\nYou can provide the path to your MitoFinder database with the mitofinder_db argument of MitoPilot::new_project function when initializing a project. Alternatively, you can specify the MitoFinder database in the assembly options section of the MitoPilot GUI.\nAssembly of contigs with MitoFinder is completely de novo. The MitoFinder reference database is only used to “label” putative mitochondrial contigs. Thus, the species in your reference database can be fairly distant relatives of your samples.\n\nUsing a custom MitoFinder database with MitoPilot\nTo use a custom Mitofinder database, you can supply the path to the GenBank file in the Assembly Opts. window and the Assemble module.\n\n\n\nFig. 3",
    "crumbs": [
      "Advanced Usage",
      "02 - custom assembly database"
    ]
  },
  {
    "objectID": "qmd/advanced/03_customCurationDB.html",
    "href": "qmd/advanced/03_customCurationDB.html",
    "title": "03 - custom curation database",
    "section": "",
    "text": "By default, MitoPilot uses protein-coding gene sequences from NCBI RefSeq to tweak the start and stop codon positions for your annotations.\nWe have provided a helper function MitoPilot::custom_curation_db, which allows you to supplement the RefSeq databases with your own gene sequences. Using a custom database can greatly improve automatic curation if your focal clade is poorly represented in RefSeq.\nYou could gather additional protein-coding genes from many sources, including:\n\nGenBank mitogenomes that are not part of RefSeq\nmitogenomes from other data repositories\nyour own unpublished mitogenomes\n\nMake sure to carefully consider what you are adding to the custom database. You should only use high-confidence sequences, as poor quality reference data will result in poorly curated gene models.\nPlease see the MitoPilot::custom_curation_db documentation for further instructions.\n\n\n\n\n\n\nNote\n\n\n\nMitoPilot only needs a curation database for protein-coding genes. rRNA and tRNA curation does not utilize reference alignment.",
    "crumbs": [
      "Advanced Usage",
      "03 - custom curation database"
    ]
  },
  {
    "objectID": "qmd/advanced/03_customCurationDB.html#build-custom-databases-for-protein-coding-gene-curation",
    "href": "qmd/advanced/03_customCurationDB.html#build-custom-databases-for-protein-coding-gene-curation",
    "title": "03 - custom curation database",
    "section": "",
    "text": "By default, MitoPilot uses protein-coding gene sequences from NCBI RefSeq to tweak the start and stop codon positions for your annotations.\nWe have provided a helper function MitoPilot::custom_curation_db, which allows you to supplement the RefSeq databases with your own gene sequences. Using a custom database can greatly improve automatic curation if your focal clade is poorly represented in RefSeq.\nYou could gather additional protein-coding genes from many sources, including:\n\nGenBank mitogenomes that are not part of RefSeq\nmitogenomes from other data repositories\nyour own unpublished mitogenomes\n\nMake sure to carefully consider what you are adding to the custom database. You should only use high-confidence sequences, as poor quality reference data will result in poorly curated gene models.\nPlease see the MitoPilot::custom_curation_db documentation for further instructions.\n\n\n\n\n\n\nNote\n\n\n\nMitoPilot only needs a curation database for protein-coding genes. rRNA and tRNA curation does not utilize reference alignment.",
    "crumbs": [
      "Advanced Usage",
      "03 - custom curation database"
    ]
  },
  {
    "objectID": "qmd/advanced/03_customCurationDB.html#using-a-custom-curation-database-with-mitopilot",
    "href": "qmd/advanced/03_customCurationDB.html#using-a-custom-curation-database-with-mitopilot",
    "title": "03 - custom curation database",
    "section": "Using a custom curation database with MitoPilot",
    "text": "Using a custom curation database with MitoPilot\nTo use a custom curation database, you need to specify the database directory path in the ref_dir field in the Curate Opts. window of the Annotate module. This path will be printed by the MitoPilot::custom_curation_db function.\nYou should also specify “Metazoa_RefSeq231_custom” or “Chordata_custom” in the ref_db field, depending on which base database you used with the MitoPilot::custom_curation_db function.\n\n\n\nFig. 4",
    "crumbs": [
      "Advanced Usage",
      "03 - custom curation database"
    ]
  },
  {
    "objectID": "qmd/advanced/04_customCurationRuleset.html",
    "href": "qmd/advanced/04_customCurationRuleset.html",
    "title": "04 - custom curation ruleset",
    "section": "",
    "text": "Coming soon…",
    "crumbs": [
      "Advanced Usage",
      "04 - custom curation ruleset"
    ]
  },
  {
    "objectID": "qmd/your_project/01_prep.html",
    "href": "qmd/your_project/01_prep.html",
    "title": "01 - data prep",
    "section": "",
    "text": "The following pages will walk through an example of how to initialize a MitoPilot project with your own data.\nTo get started, you will need: - a directory containing all of your sequence data - a CSV mapping file\nFirst, let’s create a directory to house our project. On the command line, run the following:\nmkdir -p /pool/public/genomics/${USER}/MitoPilot_workshop/my_project\nNow we need some sequence data. An example data directory is located on Hydra at /PATH/TO/DATA. This directory contains two FASTQ files per sample (the forward and reverse reads).\nLet’s copy the data to our new project directory.\ncp -rf /PATH/TO/DATA /pool/public/genomics/${USER}/MitoPilot_workshop/my_project\nNext we need to create a CSV mapping file with the following required columns: - ID: column with a unique identifier for each sample - Taxon: column containing taxonomic information for each sample, no formatting requirements - R1: full name of the forward read file - R2: full name of the reverse read file\nNormally you would create this metadata sheet from scratch in Excel, but for the workshop you can copy the provided file:\ncp -rf /PATH/TO/map_file.csv /pool/public/genomics/${USER}/MitoPilot_workshop/my_project\nThis mapping spreadsheet can contain extra columns with additional metadata. In the example file, there is an extra column Family. These extra metadata fields can be useful for sorting and grouping samples later on.",
    "crumbs": [
      "Starting Your Own Project",
      "01 - data prep"
    ]
  },
  {
    "objectID": "qmd/setup/02_RstudioServer.html",
    "href": "qmd/setup/02_RstudioServer.html",
    "title": "02 - RStudio server",
    "section": "",
    "text": "We will use RStudio server to run MitoPilot. RStudio server on Hydra functions just like the normal RStudio on your local computer, except that you are accessing it remotely.\nThere are two methods to access RStudio server on Hydra.\n\n\nThe Hydra Team recently launched an interactive R Studio environment that is accessible directly via a browser, at https://galaxy.si.edu/R4.\nHydra users can leverage this server to test, debug, and develop R based workflows using the interactive RStudio GUI (currently running R 4.4.3).\nBy logging in with your Hydra account credentials, users will have access to the storage under /pool, /scratch, and /store. This server offers resources totaling 192 CPUs and 1.5 T of RAM.\nNotes:\n\nThis is a shared resource and should be used accordingly. Long running jobs or jobs requiring the entire resources of the server would be more appropriate as a job submission.\nThis server is only accessible from trusted computers, not on the public internet. For technical reasons, to access this resource via telework.si.edu, go to https://galaxy.si.edu and then choose the “R4 v443” option.\nThis is a new resource - please be patient as we test this offering with our user community. We will evaluate this test once Hydra is moved to the new datacenter and decide whether it should be kept or altered in any way.\n\n\n\n\nTo launch RStudio server on Hydra, run the following.\n# avoid package conflicts (may not be necessary for all users)\nconda deactivate \n# load the RStudio server module\nmodule load tools/R/RStudio/server\n# launch RStudio server\nstart-rstudio-server\n\n\n\n\n\n\nNote\n\n\n\nIf this is your first time launching RStudio server, you may be asked to run a different command.\n\n\nYou will see something like this printed to your screen.\nstart-rstudio-server: starting RStudio server on host=login02 and port=8787\n  you need to create a ssh tunnel on your local machine with\n    ssh -N -L 8787:login02:8787 macguigand@hydra-login01.si.edu\n\nPoint your browser to http://localhost:8787 on your local machine.\nUse Control+C in this window to kill the server when done.\n\nTTY detected. Printing informational message about logging configuration. Logging configuration loaded from '/etc/rstudio/logging.conf'. Logging to '/home/macguigand/.local/share/rstudio/log/rserver.log'.\n\n\n\n\n\n\nWhy can’t I connect?\n\n\n\nIf you get a message saying “ERROR system error 98 (Address already in use)”, someone else has a tunnel established with the default port (8787). To fix this, try using a different port, e.g. start-rstudio-server -port 8890. Any port number between 1025-65535 is allowed.\n\n\nLeave this cluster terminal window open, open a new terminal window on your local computer, and run the ssh command printed by start-rstudio-server.\nssh -N -L 8787:login02:8787 macguigand@hydra-login01.si.edu\nEnter your Hydra password when prompted. If nothing happens, this means that you have successfully established a SSH tunnel and can connect to RStudio server.\nLeaving both terminal windows open, enter http://localhost:YOUR_PORT_NUMBER in a web browser. We recommend using Chrome or Firefox. There are some known issues running MitoPilot with Safari.\nEnter your cluster login credentials to access the RStudio server. This should open a full RStudio session in your browser. Any R commands run in this new window will execute on the cluster.",
    "crumbs": [
      "Setup",
      "02 - RStudio server"
    ]
  },
  {
    "objectID": "qmd/setup/02_RstudioServer.html#launching-rstudio-server",
    "href": "qmd/setup/02_RstudioServer.html#launching-rstudio-server",
    "title": "02 - RStudio server",
    "section": "",
    "text": "We will use RStudio server to run MitoPilot. RStudio server on Hydra functions just like the normal RStudio on your local computer, except that you are accessing it remotely.\nThere are two methods to access RStudio server on Hydra.\n\n\nThe Hydra Team recently launched an interactive R Studio environment that is accessible directly via a browser, at https://galaxy.si.edu/R4.\nHydra users can leverage this server to test, debug, and develop R based workflows using the interactive RStudio GUI (currently running R 4.4.3).\nBy logging in with your Hydra account credentials, users will have access to the storage under /pool, /scratch, and /store. This server offers resources totaling 192 CPUs and 1.5 T of RAM.\nNotes:\n\nThis is a shared resource and should be used accordingly. Long running jobs or jobs requiring the entire resources of the server would be more appropriate as a job submission.\nThis server is only accessible from trusted computers, not on the public internet. For technical reasons, to access this resource via telework.si.edu, go to https://galaxy.si.edu and then choose the “R4 v443” option.\nThis is a new resource - please be patient as we test this offering with our user community. We will evaluate this test once Hydra is moved to the new datacenter and decide whether it should be kept or altered in any way.\n\n\n\n\nTo launch RStudio server on Hydra, run the following.\n# avoid package conflicts (may not be necessary for all users)\nconda deactivate \n# load the RStudio server module\nmodule load tools/R/RStudio/server\n# launch RStudio server\nstart-rstudio-server\n\n\n\n\n\n\nNote\n\n\n\nIf this is your first time launching RStudio server, you may be asked to run a different command.\n\n\nYou will see something like this printed to your screen.\nstart-rstudio-server: starting RStudio server on host=login02 and port=8787\n  you need to create a ssh tunnel on your local machine with\n    ssh -N -L 8787:login02:8787 macguigand@hydra-login01.si.edu\n\nPoint your browser to http://localhost:8787 on your local machine.\nUse Control+C in this window to kill the server when done.\n\nTTY detected. Printing informational message about logging configuration. Logging configuration loaded from '/etc/rstudio/logging.conf'. Logging to '/home/macguigand/.local/share/rstudio/log/rserver.log'.\n\n\n\n\n\n\nWhy can’t I connect?\n\n\n\nIf you get a message saying “ERROR system error 98 (Address already in use)”, someone else has a tunnel established with the default port (8787). To fix this, try using a different port, e.g. start-rstudio-server -port 8890. Any port number between 1025-65535 is allowed.\n\n\nLeave this cluster terminal window open, open a new terminal window on your local computer, and run the ssh command printed by start-rstudio-server.\nssh -N -L 8787:login02:8787 macguigand@hydra-login01.si.edu\nEnter your Hydra password when prompted. If nothing happens, this means that you have successfully established a SSH tunnel and can connect to RStudio server.\nLeaving both terminal windows open, enter http://localhost:YOUR_PORT_NUMBER in a web browser. We recommend using Chrome or Firefox. There are some known issues running MitoPilot with Safari.\nEnter your cluster login credentials to access the RStudio server. This should open a full RStudio session in your browser. Any R commands run in this new window will execute on the cluster.",
    "crumbs": [
      "Setup",
      "02 - RStudio server"
    ]
  },
  {
    "objectID": "qmd/setup/05_load.html",
    "href": "qmd/setup/05_load.html",
    "title": "05 - load MitoPilot",
    "section": "",
    "text": "To load the MitoPilot R package, we first need to modify our PATH environmental variable. This will allow our RStudio session to find and use java and nextflow.\n# modify PATH to include:\n#   ~/bin (contains nextflow exe)\n#   java 21.0.2 (required for nextflow)\ndefault_path &lt;- \"/cm/shared/apps/uge/8.8.1/bin/lx-amd64:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/usr/lib/rstudio-server/bin/quarto/bin:/usr/lib/rstudio-server/bin/postback\"\nnew_path &lt;- paste0(Sys.getenv(\"HOME\"), \"/bin:/share/apps/tools/java/21.0.2/bin\")\nSys.setenv(PATH = paste(new_path, default_path, sep = \":\"))\nNext, load the MitoPilot package.\nlibrary(MitoPilot)\nYou should see a message confirming that Nextflow is installed and accessible.\nWelcome to {MitoPilot}!\nUsing Nextflow version 24.10.4 build 5934\nYou can now utilize all of MitoPilot’s functions, such as initializing a project or opening the R Shiny GUI.\nLet’s get started with the example project!",
    "crumbs": [
      "Setup",
      "05 - load MitoPilot"
    ]
  },
  {
    "objectID": "qmd/setup/05_load.html#loading-the-mitopilot-package",
    "href": "qmd/setup/05_load.html#loading-the-mitopilot-package",
    "title": "05 - load MitoPilot",
    "section": "",
    "text": "To load the MitoPilot R package, we first need to modify our PATH environmental variable. This will allow our RStudio session to find and use java and nextflow.\n# modify PATH to include:\n#   ~/bin (contains nextflow exe)\n#   java 21.0.2 (required for nextflow)\ndefault_path &lt;- \"/cm/shared/apps/uge/8.8.1/bin/lx-amd64:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/usr/lib/rstudio-server/bin/quarto/bin:/usr/lib/rstudio-server/bin/postback\"\nnew_path &lt;- paste0(Sys.getenv(\"HOME\"), \"/bin:/share/apps/tools/java/21.0.2/bin\")\nSys.setenv(PATH = paste(new_path, default_path, sep = \":\"))\nNext, load the MitoPilot package.\nlibrary(MitoPilot)\nYou should see a message confirming that Nextflow is installed and accessible.\nWelcome to {MitoPilot}!\nUsing Nextflow version 24.10.4 build 5934\nYou can now utilize all of MitoPilot’s functions, such as initializing a project or opening the R Shiny GUI.\nLet’s get started with the example project!",
    "crumbs": [
      "Setup",
      "05 - load MitoPilot"
    ]
  },
  {
    "objectID": "qmd/setup/01_Hydra.html",
    "href": "qmd/setup/01_Hydra.html",
    "title": "01 - Hydra cluster setup",
    "section": "",
    "text": "You will need an account to access the Smithsonian Hyrda computing cluster. Instructions are available here.",
    "crumbs": [
      "Setup",
      "01 - Hydra cluster setup"
    ]
  },
  {
    "objectID": "qmd/setup/01_Hydra.html#access-to-the-hydra-cluster",
    "href": "qmd/setup/01_Hydra.html#access-to-the-hydra-cluster",
    "title": "01 - Hydra cluster setup",
    "section": "",
    "text": "You will need an account to access the Smithsonian Hyrda computing cluster. Instructions are available here.",
    "crumbs": [
      "Setup",
      "01 - Hydra cluster setup"
    ]
  },
  {
    "objectID": "qmd/setup/01_Hydra.html#first-time-setup",
    "href": "qmd/setup/01_Hydra.html#first-time-setup",
    "title": "01 - Hydra cluster setup",
    "section": "First time setup",
    "text": "First time setup\nWe have submitted a request to the Hydra team for installation of a Nextflow module. But for now, you will need to install your own copy of Nextflow on the cluster. Login to Hydra and run the following.\n# Nextflow installation instructions\n# from https://www.nextflow.io/docs/latest/install.html\ncd ~\n# load Java module, needed by Nextflow\nmodule load tools/java/21.0.2\n# install Nextflow\ncurl -s https://get.nextflow.io | bash \n# make Nextflow executable\nchmod +x nextflow \nThere will now be an executable nextflow file in your home directory. You should move it to a location that is in your PATH. For example:\n # create bin directory, if needed\nmkdir ~/bin\n# move nextflow to bin directory\nmv ~/nextflow ~/bin/nextflow \n# add bin directory to PATH, in case it's not already there\necho 'export PATH=\"${HOME}/bin:${PATH}\"' &gt;&gt; ~/.bashrc \n# reload your bash configuration file\nsource ~/.bashrc\nThis should allow you to call nextflow from anywhere on the cluster.\n\n\n\n\n\n\nImportant\n\n\n\nYou must load the Hydra Java module (module load tools/java/21.0.2) whenever you wish to use Nextflow.",
    "crumbs": [
      "Setup",
      "01 - Hydra cluster setup"
    ]
  },
  {
    "objectID": "qmd/MitoPilot_intro/MitoPilot-intro.html",
    "href": "qmd/MitoPilot_intro/MitoPilot-intro.html",
    "title": "Intro to MitoPilot",
    "section": "",
    "text": "MitoPilot is an R package for mitogenome assembly and annotation from genome skimming data. It uses Nexflow and includes a R Shiny web app for project management and final curation of results, which can be exported in NCBI Genbank submission format. MitoPilot comes with extensive documentation.\nIntro slides: Download PDF file.",
    "crumbs": [
      "Intro to MitoPilot"
    ]
  },
  {
    "objectID": "qmd/example_project/01_init.html",
    "href": "qmd/example_project/01_init.html",
    "title": "01 - initialize project",
    "section": "",
    "text": "MitoPilot comes pre-packaged with a test project consisting of Illumina data for 13 fish species.\nTo get started, we need to initialize the test project with the R function MitoPilot::new_test_project. This function will download the data and set up a new project directory.\n\n\n\n\n\n\nNote\n\n\n\nTo initialize a MitoPilot with your own data, use the R function MitoPilot::new_project instead. You will need to provide additional information such as a mapping file and sequence data.\n\n\n# load the package\nlibrary(MitoPilot)\n\n# specify the directory where your test project will be created\n# if the directory does not exist, MitoPilot will create it\nwd &lt;- \"/pool/public/genomics/macguigand/MitoPilot/NMNH_workshop_2025-06-13/test_project_01\"\n\n# specify an execution environment, \"local\", \"NMNH_Hydra\", or \"NOAA_SEDNA\"\nex &lt;- \"NMNH_Hydra\"\n\n# initialize the test project\nMitoPilot::new_test_project(\n    path = wd,\n    executor = ex,\n    full_size = FALSE,\n    Rproj = FALSE\n)\nIf the test project was successfully initialized, you should see the following message.\nCreating project directory: /pool/public/genomics/macguigand/MitoPilot/NMNH_workshop_2025-06-13/test_project_01\nSRR22396758 - Upeneus parvus                                                                                                                                 \nSRR22396794 - Psychrolutes paradoxus\nSRR22396940 - Psenes pellucidus\nSRR22396740 - Hoplostethus occidentalis\nSRR21844202 - Fundulus majalis\nSRR22396640 - Xyrichtys novacula\nSRR22396732 - Gephyroberyx darwinii\nSRR22396627 - Gigantura indica\nSRR21843972 - Stomias affinis\nSRR22396843 - Conger oceanicus\nSRR22396668 - Erotelis smaragdus\nSRR22396865 - Paraconger caudilimbatus\nSRR19434536 - Rhinecanthus rectangulus\nProject initialized successfully.\nPlease open and review the .config file to ensure all required options are specified.\nThe new project directory contains a hidden file .config, which you can inspect if you wish. This file contains parameters that will be used by Nextflow to run the MitoPilot analysis workflow. All of the default settings in the config should work fine for the test project.",
    "crumbs": [
      "Example Project",
      "01 - initialize project"
    ]
  },
  {
    "objectID": "qmd/example_project/01_init.html#test-project-setup",
    "href": "qmd/example_project/01_init.html#test-project-setup",
    "title": "01 - initialize project",
    "section": "",
    "text": "MitoPilot comes pre-packaged with a test project consisting of Illumina data for 13 fish species.\nTo get started, we need to initialize the test project with the R function MitoPilot::new_test_project. This function will download the data and set up a new project directory.\n\n\n\n\n\n\nNote\n\n\n\nTo initialize a MitoPilot with your own data, use the R function MitoPilot::new_project instead. You will need to provide additional information such as a mapping file and sequence data.\n\n\n# load the package\nlibrary(MitoPilot)\n\n# specify the directory where your test project will be created\n# if the directory does not exist, MitoPilot will create it\nwd &lt;- \"/pool/public/genomics/macguigand/MitoPilot/NMNH_workshop_2025-06-13/test_project_01\"\n\n# specify an execution environment, \"local\", \"NMNH_Hydra\", or \"NOAA_SEDNA\"\nex &lt;- \"NMNH_Hydra\"\n\n# initialize the test project\nMitoPilot::new_test_project(\n    path = wd,\n    executor = ex,\n    full_size = FALSE,\n    Rproj = FALSE\n)\nIf the test project was successfully initialized, you should see the following message.\nCreating project directory: /pool/public/genomics/macguigand/MitoPilot/NMNH_workshop_2025-06-13/test_project_01\nSRR22396758 - Upeneus parvus                                                                                                                                 \nSRR22396794 - Psychrolutes paradoxus\nSRR22396940 - Psenes pellucidus\nSRR22396740 - Hoplostethus occidentalis\nSRR21844202 - Fundulus majalis\nSRR22396640 - Xyrichtys novacula\nSRR22396732 - Gephyroberyx darwinii\nSRR22396627 - Gigantura indica\nSRR21843972 - Stomias affinis\nSRR22396843 - Conger oceanicus\nSRR22396668 - Erotelis smaragdus\nSRR22396865 - Paraconger caudilimbatus\nSRR19434536 - Rhinecanthus rectangulus\nProject initialized successfully.\nPlease open and review the .config file to ensure all required options are specified.\nThe new project directory contains a hidden file .config, which you can inspect if you wish. This file contains parameters that will be used by Nextflow to run the MitoPilot analysis workflow. All of the default settings in the config should work fine for the test project.",
    "crumbs": [
      "Example Project",
      "01 - initialize project"
    ]
  },
  {
    "objectID": "qmd/example_project/01_init.html#launching-the-mitopilot-gui",
    "href": "qmd/example_project/01_init.html#launching-the-mitopilot-gui",
    "title": "01 - initialize project",
    "section": "Launching the MitoPilot GUI",
    "text": "Launching the MitoPilot GUI\nWe can now launch the R Shiny graphical user interface (GUI) to examine our test project and start the MitoPilot analysis pipeline.\n# the function to launch the GUI \n# must be called from within your project directory\nwd &lt;- \"/pool/public/genomics/macguigand/MitoPilot/NMNH_workshop_2025-06-13/test_project_01\"\nsetwd(wd)\nMitoPilot::MitoPilot()\n\n\n\nFig. 1\n\n\nNice! We can see some basic information about our samples. When initializing your own project, this info is pulled from the mapping CSV file.\nThe dropdown menu at the top left switches between the different MitoPilot modules: Assemble, Annotate, and Export. If necessary, the circular arrow button in the top left will refresh the current table.\n\n\n\nFig. 2\n\n\nClicking on a column name will sort the table by that column.\n\n\n\nFig. 3\n\n\nYou can filter samples using the search box in the top right. Most columns can also be filtered using the text boxes at the top of the table.\n\n\n\nFig. 4\n\n\nTo the left of the sample ID column are two icons. The first icon shows whether the sample is locked or unlocked. If a sample is unlocked, it will be included when running the current pipeline module. A locked sample cannot be edited in the current module, but will be made available for the next pipeline module.\nYou can toggle the lock by selecting the sample, then pressing LOCK at the top of the window. Multiple samples can be locked or unlocked simultaneously.\n\n\n\nFig. 5\n\n\nThe other icon shows the state of the sample. These states vary depending on the analysis module and will be automatically updated when running the pipeline.\nHowever, you can also manually change the state of a sample using the STATE button. For example, in the Assemble module you could prevent samples from running through the pipeline by manually setting their states to Hold / Waiting.\n\n\n\nFig. 6",
    "crumbs": [
      "Example Project",
      "01 - initialize project"
    ]
  },
  {
    "objectID": "qmd/example_project/01_init.html#modifying-pipeline-parameters",
    "href": "qmd/example_project/01_init.html#modifying-pipeline-parameters",
    "title": "01 - initialize project",
    "section": "Modifying Pipeline Parameters",
    "text": "Modifying Pipeline Parameters\nWithin the GUI, we can modify options for each step of the current pipeline module. Click on one of the default links in the Preprocess Opts column.\n\n\n\nFig. 7\n\n\nHere you can see the default options for pre-processing the raw FASTQ files. We can modify these by clicking the edit checkbox. Let’s change the memory to 20 GB. You could also change the options passed to fastp, but we’ll keep those at the defaults for now.\n\n\n\nFig. 8\n\n\nWe can save these new parameter options by clicking on the Parameter set name box, typing a new name, and clicking Add YOUR NEW NAME... in the dropdown. Finally, click Update in the bottom right to save your changes.\n\n\n\nFig. 9\n\n\nOnce you’ve saved a new parameter set, you can easily access it again using the dropdown menu. In the screenshot below, you can see another parameter set called “test” that I created.\n\n\n\nFig. 10\n\n\nAfter clicking Update, your table should now show high_mem for all samples in the Preprocess Opts column.\n\n\n\nFig. 11\n\n\nYou can set different parameters for different samples by repeating the above process. But for the test dataset, let’s keep everything consistent.\nNext, let’s modify the Assembly Opts. Repeat the process above, and creating a new high_mem setting with 6 CPUs and 60 GB of memory.\n\n\n\nFig. 12\n\n\nThe Assembly Opts window has more options to tinker with. In the Assembler dropdown menu you can choose between GetOrganalle and MitoFinder.\nGetOrganelle is the default assembler for MitoPilot. It is considerably faster than MitoFinder. The downside is that GetOrganelle requires good reference mitogenomes. Thankfully, there are many high-quality fish mitogenomes available. MitoFinder may be a better choice for clades with few reference sequences.\nYou can modify the parameters for GetOrganalle, including the seeds and labels databases. The default fish reference databases are downloaded from the MitoPilot GitHub repository. You could use custom databases by providing the full paths to the appropriate FASTA files on your local computer or cluster.\nLikewise, you could provide a custom .gb reference database for MitoFinder. The default option is the Danio rerio reference mitogenome (GenBank NC_002333.2).\nSee our documentation for more info about custom GetOrganalle and MitoFinder databases,\nFor the test project, we’ll stick with GetOrganalle and the default settings.",
    "crumbs": [
      "Example Project",
      "01 - initialize project"
    ]
  },
  {
    "objectID": "qmd/example_project/02_nextflow.html",
    "href": "qmd/example_project/02_nextflow.html",
    "title": "02 - running MitoPilot modules",
    "section": "",
    "text": "Now that our test project is set up, it’s time to run the analysis workflow. MitoPilot utilizes Nextflow to analyze all of the samples in parallel. This is far more efficient than running each sample one at a time in a serial workflow.\nTo generate the Nextflow command for the Assemble module, click the UPDATE button at the top of the GUI.\n\n\n\nFig. 13\n\n\nThere are two ways to run this Nextflow command on Hydra.\n\n\nWith the Update window open, click the Start Nextflow button to run the analysis pipeline within the MitoPilot GUI. This requires you to keep the GUI open while the pipeline is running.\n\n\n\n\n\n\nNote\n\n\n\nWe recommend only using this method for small numbers of samples. If your internet connection is interrupted, the analysis pipeline will stop. You can resume an interrupted run, but it will waste time and can occasionally cause bugs.\n\n\n\n\n\nFig. 14\n\n\nAnd we’re off! You should see Nextflow output being printed the to Progress window. This window will continually update as the pipeline progresses. As long as the gears in the top right are spinning, the pipeline is still running.\nThe Assemble pipeline module has 3 steps: preprocessing (filtering) the raw FASTQ files with fastp, assembling the mitogenomes using GetOrganelle (or MitoFinder), and calculating coverage maps for the assemblies using bowtie2.\nNextflow distributes the analyses across multiple batch jobs on the Hydra cluster. This can allow you to run hundreds of samples simultaneously. The Progress window will update as samples finish each step.\nYou can use Hydra’s job scheduler to check on the status of MitoPilot jobs. Some samples may finish faster than others.\n\n\n\nFig. 15\n\n\nSome samples may fail at certain steps (though this is unlikely for the test dataset). Failures are often due to running out of memory, so MitoPilot will retry failed samples with more RAM. The Nextflow log tracks the number of failed samples and retries. We describe some common errors here.\n\n\n\nFig. 16\n\n\nThe test dataset should take a few minutes to finish. When it’s done, your Progress window will look something like this.\n\n\n\nFig. 17\n\n\nScroll all the way to the bottom of the Progress window to find some summary info about the run.\n\n\n\nFig. 18\n\n\nClick Close to return to the samples table.\n\n\n\nIf you have a large number of samples to process (more than a few dozen), we recommend running the Assemble and Annotate MitoPilot modules as batch jobs.\nYou will still need to generate the Nextflow command using the MitoPilot GUI. But instead of clicking the Start Nextflow button, copy the Nextflow command and create a batch submission script.\nWe have provided a template below. You may wish to modify the job name (-N) and the log file name (-o).\n#!/bin/sh\n#$ -N MitoPilot_assembly # MODIFY THIS IF DESIRED\n#$ -o MitoPilot_assembly.log # MODIFY THIS IF DESIRED\n#$ -cwd -j y\n#$ -q lTWFM.sq\n#$ -l wfmq\n#$ -pe mthread 2\n#$ -S /bin/sh\n\necho + `date` job $JOB_NAME started in $QUEUE with jobID=$JOB_ID on $HOSTNAME\n\nsource ~/.bashrc\n\nmodule load tools/java/21.0.2 # required for Nextflow on Hydra\n\n# EXAMPLE NEXTFLOW COMMAND\nnextflow -log /pool/public/genomics/macguigand/MitoPilot/NMNH_workshop_2025/test_project_01/.logs/nextflow.log run /home/macguigand/R/x86_64-redhat-linux-gnu-library/4.4/MitoPilot/nextflow -c /pool/public/genomics/macguigand/MitoPilot/NMNH_workshop_2025/test_project_01/.config -entry WF1 \n\necho = `date` job $JOB_NAME done\n\n\n\n\n\n\nImportant\n\n\n\nYou must use the options -q lTWFM.sq and -l wfmq. This is a special Hydra queue for workflow managers like Nextflow. You must also include -pe mthread 2 in order to have enough available RAM for building the MitoPilot Singularity image.\n\n\nMove the submission script into your MitoPilot project directory. In the above example, /pool/public/genomics/macguigand/MitoPilot/NMNH_workshop_2025/test_project_01. Then submit the job using qsub MY_SCRIPT_NAME.sh.\nYou can monitor the progress of this job using the qstat command and by checking on the log files. Once the job is done, you can relaunch the GUI to inspect the results. The same approach can be used for the Annotate module.",
    "crumbs": [
      "Example Project",
      "02 - running MitoPilot modules"
    ]
  },
  {
    "objectID": "qmd/example_project/02_nextflow.html#running-the-mitopilot-workflow",
    "href": "qmd/example_project/02_nextflow.html#running-the-mitopilot-workflow",
    "title": "02 - running MitoPilot modules",
    "section": "",
    "text": "Now that our test project is set up, it’s time to run the analysis workflow. MitoPilot utilizes Nextflow to analyze all of the samples in parallel. This is far more efficient than running each sample one at a time in a serial workflow.\nTo generate the Nextflow command for the Assemble module, click the UPDATE button at the top of the GUI.\n\n\n\nFig. 13\n\n\nThere are two ways to run this Nextflow command on Hydra.\n\n\nWith the Update window open, click the Start Nextflow button to run the analysis pipeline within the MitoPilot GUI. This requires you to keep the GUI open while the pipeline is running.\n\n\n\n\n\n\nNote\n\n\n\nWe recommend only using this method for small numbers of samples. If your internet connection is interrupted, the analysis pipeline will stop. You can resume an interrupted run, but it will waste time and can occasionally cause bugs.\n\n\n\n\n\nFig. 14\n\n\nAnd we’re off! You should see Nextflow output being printed the to Progress window. This window will continually update as the pipeline progresses. As long as the gears in the top right are spinning, the pipeline is still running.\nThe Assemble pipeline module has 3 steps: preprocessing (filtering) the raw FASTQ files with fastp, assembling the mitogenomes using GetOrganelle (or MitoFinder), and calculating coverage maps for the assemblies using bowtie2.\nNextflow distributes the analyses across multiple batch jobs on the Hydra cluster. This can allow you to run hundreds of samples simultaneously. The Progress window will update as samples finish each step.\nYou can use Hydra’s job scheduler to check on the status of MitoPilot jobs. Some samples may finish faster than others.\n\n\n\nFig. 15\n\n\nSome samples may fail at certain steps (though this is unlikely for the test dataset). Failures are often due to running out of memory, so MitoPilot will retry failed samples with more RAM. The Nextflow log tracks the number of failed samples and retries. We describe some common errors here.\n\n\n\nFig. 16\n\n\nThe test dataset should take a few minutes to finish. When it’s done, your Progress window will look something like this.\n\n\n\nFig. 17\n\n\nScroll all the way to the bottom of the Progress window to find some summary info about the run.\n\n\n\nFig. 18\n\n\nClick Close to return to the samples table.\n\n\n\nIf you have a large number of samples to process (more than a few dozen), we recommend running the Assemble and Annotate MitoPilot modules as batch jobs.\nYou will still need to generate the Nextflow command using the MitoPilot GUI. But instead of clicking the Start Nextflow button, copy the Nextflow command and create a batch submission script.\nWe have provided a template below. You may wish to modify the job name (-N) and the log file name (-o).\n#!/bin/sh\n#$ -N MitoPilot_assembly # MODIFY THIS IF DESIRED\n#$ -o MitoPilot_assembly.log # MODIFY THIS IF DESIRED\n#$ -cwd -j y\n#$ -q lTWFM.sq\n#$ -l wfmq\n#$ -pe mthread 2\n#$ -S /bin/sh\n\necho + `date` job $JOB_NAME started in $QUEUE with jobID=$JOB_ID on $HOSTNAME\n\nsource ~/.bashrc\n\nmodule load tools/java/21.0.2 # required for Nextflow on Hydra\n\n# EXAMPLE NEXTFLOW COMMAND\nnextflow -log /pool/public/genomics/macguigand/MitoPilot/NMNH_workshop_2025/test_project_01/.logs/nextflow.log run /home/macguigand/R/x86_64-redhat-linux-gnu-library/4.4/MitoPilot/nextflow -c /pool/public/genomics/macguigand/MitoPilot/NMNH_workshop_2025/test_project_01/.config -entry WF1 \n\necho = `date` job $JOB_NAME done\n\n\n\n\n\n\nImportant\n\n\n\nYou must use the options -q lTWFM.sq and -l wfmq. This is a special Hydra queue for workflow managers like Nextflow. You must also include -pe mthread 2 in order to have enough available RAM for building the MitoPilot Singularity image.\n\n\nMove the submission script into your MitoPilot project directory. In the above example, /pool/public/genomics/macguigand/MitoPilot/NMNH_workshop_2025/test_project_01. Then submit the job using qsub MY_SCRIPT_NAME.sh.\nYou can monitor the progress of this job using the qstat command and by checking on the log files. Once the job is done, you can relaunch the GUI to inspect the results. The same approach can be used for the Annotate module.",
    "crumbs": [
      "Example Project",
      "02 - running MitoPilot modules"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MitoPilot Workshop 2025",
    "section": "",
    "text": "Welcome to the website for the 2025 Smithsonian NMNH MitoPilot workshop!"
  }
]