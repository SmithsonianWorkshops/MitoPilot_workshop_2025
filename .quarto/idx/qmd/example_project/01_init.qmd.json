{"title":"01 - initialize project","markdown":{"yaml":{"title":"01 - initialize project"},"headingText":"Test project setup","containsRefs":false,"markdown":"\n\n\nMitoPilot comes pre-packaged with a test project consisting of Illumina data for 13 fish species. \n\nTo get started, we need to initialize the test project with the R function `MitoPilot::new_test_project`. This function will download the data and set up a new project directory.\n\n::: {.callout-note}\nTo initialize a MitoPilot with your own data, use the R function [`MitoPilot::new_project`](https://smithsonian.github.io/MitoPilot/reference/new_project.html) instead. You will need to provide additional information such as a mapping file and sequence data.\n:::\n\n```r\n# load the package\nlibrary(MitoPilot)\n\n# specify the directory where your test project will be created\n# if the directory does not exist, MitoPilot will create it\nwd <- \"/pool/public/genomics/macguigand/MitoPilot/NMNH_workshop_2025-06-13/test_project_01\"\n\n# specify an execution environment, \"local\", \"NMNH_Hydra\", or \"NOAA_SEDNA\"\nex <- \"NMNH_Hydra\"\n\n# initialize the test project\nMitoPilot::new_test_project(\n    path = wd,\n    executor = ex,\n    full_size = FALSE,\n    Rproj = FALSE\n)\n```\n\nIf the test project was successfully initialized, you should see the following message.\n\n```\nCreating project directory: /pool/public/genomics/macguigand/MitoPilot/NMNH_workshop_2025-06-13/test_project_01\nSRR22396758 - Upeneus parvus                                                                                                                                 \nSRR22396794 - Psychrolutes paradoxus\nSRR22396940 - Psenes pellucidus\nSRR22396740 - Hoplostethus occidentalis\nSRR21844202 - Fundulus majalis\nSRR22396640 - Xyrichtys novacula\nSRR22396732 - Gephyroberyx darwinii\nSRR22396627 - Gigantura indica\nSRR21843972 - Stomias affinis\nSRR22396843 - Conger oceanicus\nSRR22396668 - Erotelis smaragdus\nSRR22396865 - Paraconger caudilimbatus\nSRR19434536 - Rhinecanthus rectangulus\nProject initialized successfully.\nPlease open and review the .config file to ensure all required options are specified.\n```\n\nThe new project directory contains a hidden file `.config`, which you can inspect if you wish. This file contains parameters that will be used by Nextflow to run the MitoPilot analysis workflow. All of the default settings in the config should work fine for the test project.\n\n## Launching the MitoPilot GUI\n\nWe can now launch the R Shiny graphical user interface (GUI) to examine our test project and start the MitoPilot analysis pipeline.\n\n```r\n# the function to launch the GUI \n# must be called from within your project directory\nwd <- \"/pool/public/genomics/macguigand/MitoPilot/NMNH_workshop_2025-06-13/test_project_01\"\nsetwd(wd)\nMitoPilot::MitoPilot()\n```\n![Fig. 1](/images/01.png)\n\n\nNice! We can see some basic information about our samples. When initializing your own project, this info is pulled from the mapping CSV file.\n\nThe dropdown menu at the top left switches between the different MitoPilot modules: Assemble, Annotate, and Export. If necessary, the circular arrow button in the top left will refresh the current table.\n\n![Fig. 2](/images/02.png)\n\nClicking on a column name will sort the table by that column. \n\n![Fig. 3](/images/03.png)\n\nYou can filter samples using the search box in the top right. Most columns can also be filtered using the text boxes at the top of the table.\n\n![Fig. 4](/images/04.png)\n\nTo the left of the sample ID column are two icons. The first icon shows whether the sample is locked or unlocked. If a sample is unlocked, it will be included when running the current pipeline module. A locked sample cannot be edited in the current module, but will be made available for the next pipeline module. \n\nYou can toggle the lock by selecting the sample, then pressing `LOCK` at the top of the window. Multiple samples can be locked or unlocked simultaneously.\n\n![Fig. 5](/images/05.png)\n\nThe other icon shows the state of the sample. These states vary depending on the analysis module and will be automatically updated when running the pipeline. \n\nHowever, you can also manually change the state of a sample using the `STATE` button. For example, in the Assemble module you could prevent samples from running through the pipeline by manually setting their states to `Hold / Waiting`.\n\n![Fig. 6](/images/06.png)\n\n## Modifying Pipeline Parameters\n\nWithin the GUI, we can modify options for each step of the current pipeline module. Click on one of the `default` links in the `Preprocess Opts` column.\n\n![Fig. 7](/images/07.png)\n\nHere you can see the default options for pre-processing the raw FASTQ files. We can modify these by clicking the `edit` checkbox. Let's change the memory to 20 GB. You could also change the options passed to [fastp](https://github.com/OpenGene/fastp), but we'll keep those at the defaults for now.\n\n![Fig. 8](/images/08.png)\n\nWe can save these new parameter options by clicking on the `Parameter set name` box, typing a new name, and clicking  `Add YOUR NEW NAME...` in the dropdown. Finally, click `Update` in the bottom right to save your changes.\n\n![Fig. 9](/images/09.png)\n\nOnce you've saved a new parameter set, you can easily access it again using the dropdown menu. In the screenshot below, you can see another parameter set called \"test\" that I created.\n\n![Fig. 10](/images/10.png)\n\nAfter clicking `Update`, your table should now show `high_mem` for all samples in the `Preprocess Opts` column.\n\n![Fig. 11](/images/11.png)\n\nYou can set different parameters for different samples by repeating the above process. But for the test dataset, let's keep everything consistent.\n\nNext, let's modify the `Assembly Opts`. Repeat the process above, and creating a new `high_mem` setting with 6 CPUs and 60 GB of memory.\n\n![Fig. 12](/images/12.png)\n\nThe `Assembly Opts` window has more options to tinker with. In the `Assembler` dropdown menu you can choose between [GetOrganalle](https://github.com/Kinggerm/GetOrganelle) and [MitoFinder](https://github.com/RemiAllio/MitoFinder). \n\nGetOrganelle is the default assembler for MitoPilot. It is considerably faster than MitoFinder. The downside is that GetOrganelle requires good reference mitogenomes. Thankfully, there are many high-quality fish mitogenomes available. MitoFinder may be a better choice for clades with few reference sequences.\n\nYou can modify the parameters for GetOrganalle, including the seeds and labels databases. The default fish reference databases are downloaded from the MitoPilot GitHub repository. You could use custom databases by providing the full paths to the appropriate FASTA files on your local computer or cluster. \n\nLikewise, you could provide a custom `.gb` reference database for MitoFinder. The default option is the *Danio rerio* reference mitogenome (GenBank NC_002333.2).\n\nSee our [documentation](https://smithsonian.github.io/MitoPilot/articles/custom_dbs.html) for more info about custom GetOrganalle and MitoFinder databases, \n\nFor the test project, we'll stick with GetOrganalle and the default settings.\n","srcMarkdownNoYaml":"\n\n## Test project setup\n\nMitoPilot comes pre-packaged with a test project consisting of Illumina data for 13 fish species. \n\nTo get started, we need to initialize the test project with the R function `MitoPilot::new_test_project`. This function will download the data and set up a new project directory.\n\n::: {.callout-note}\nTo initialize a MitoPilot with your own data, use the R function [`MitoPilot::new_project`](https://smithsonian.github.io/MitoPilot/reference/new_project.html) instead. You will need to provide additional information such as a mapping file and sequence data.\n:::\n\n```r\n# load the package\nlibrary(MitoPilot)\n\n# specify the directory where your test project will be created\n# if the directory does not exist, MitoPilot will create it\nwd <- \"/pool/public/genomics/macguigand/MitoPilot/NMNH_workshop_2025-06-13/test_project_01\"\n\n# specify an execution environment, \"local\", \"NMNH_Hydra\", or \"NOAA_SEDNA\"\nex <- \"NMNH_Hydra\"\n\n# initialize the test project\nMitoPilot::new_test_project(\n    path = wd,\n    executor = ex,\n    full_size = FALSE,\n    Rproj = FALSE\n)\n```\n\nIf the test project was successfully initialized, you should see the following message.\n\n```\nCreating project directory: /pool/public/genomics/macguigand/MitoPilot/NMNH_workshop_2025-06-13/test_project_01\nSRR22396758 - Upeneus parvus                                                                                                                                 \nSRR22396794 - Psychrolutes paradoxus\nSRR22396940 - Psenes pellucidus\nSRR22396740 - Hoplostethus occidentalis\nSRR21844202 - Fundulus majalis\nSRR22396640 - Xyrichtys novacula\nSRR22396732 - Gephyroberyx darwinii\nSRR22396627 - Gigantura indica\nSRR21843972 - Stomias affinis\nSRR22396843 - Conger oceanicus\nSRR22396668 - Erotelis smaragdus\nSRR22396865 - Paraconger caudilimbatus\nSRR19434536 - Rhinecanthus rectangulus\nProject initialized successfully.\nPlease open and review the .config file to ensure all required options are specified.\n```\n\nThe new project directory contains a hidden file `.config`, which you can inspect if you wish. This file contains parameters that will be used by Nextflow to run the MitoPilot analysis workflow. All of the default settings in the config should work fine for the test project.\n\n## Launching the MitoPilot GUI\n\nWe can now launch the R Shiny graphical user interface (GUI) to examine our test project and start the MitoPilot analysis pipeline.\n\n```r\n# the function to launch the GUI \n# must be called from within your project directory\nwd <- \"/pool/public/genomics/macguigand/MitoPilot/NMNH_workshop_2025-06-13/test_project_01\"\nsetwd(wd)\nMitoPilot::MitoPilot()\n```\n![Fig. 1](/images/01.png)\n\n\nNice! We can see some basic information about our samples. When initializing your own project, this info is pulled from the mapping CSV file.\n\nThe dropdown menu at the top left switches between the different MitoPilot modules: Assemble, Annotate, and Export. If necessary, the circular arrow button in the top left will refresh the current table.\n\n![Fig. 2](/images/02.png)\n\nClicking on a column name will sort the table by that column. \n\n![Fig. 3](/images/03.png)\n\nYou can filter samples using the search box in the top right. Most columns can also be filtered using the text boxes at the top of the table.\n\n![Fig. 4](/images/04.png)\n\nTo the left of the sample ID column are two icons. The first icon shows whether the sample is locked or unlocked. If a sample is unlocked, it will be included when running the current pipeline module. A locked sample cannot be edited in the current module, but will be made available for the next pipeline module. \n\nYou can toggle the lock by selecting the sample, then pressing `LOCK` at the top of the window. Multiple samples can be locked or unlocked simultaneously.\n\n![Fig. 5](/images/05.png)\n\nThe other icon shows the state of the sample. These states vary depending on the analysis module and will be automatically updated when running the pipeline. \n\nHowever, you can also manually change the state of a sample using the `STATE` button. For example, in the Assemble module you could prevent samples from running through the pipeline by manually setting their states to `Hold / Waiting`.\n\n![Fig. 6](/images/06.png)\n\n## Modifying Pipeline Parameters\n\nWithin the GUI, we can modify options for each step of the current pipeline module. Click on one of the `default` links in the `Preprocess Opts` column.\n\n![Fig. 7](/images/07.png)\n\nHere you can see the default options for pre-processing the raw FASTQ files. We can modify these by clicking the `edit` checkbox. Let's change the memory to 20 GB. You could also change the options passed to [fastp](https://github.com/OpenGene/fastp), but we'll keep those at the defaults for now.\n\n![Fig. 8](/images/08.png)\n\nWe can save these new parameter options by clicking on the `Parameter set name` box, typing a new name, and clicking  `Add YOUR NEW NAME...` in the dropdown. Finally, click `Update` in the bottom right to save your changes.\n\n![Fig. 9](/images/09.png)\n\nOnce you've saved a new parameter set, you can easily access it again using the dropdown menu. In the screenshot below, you can see another parameter set called \"test\" that I created.\n\n![Fig. 10](/images/10.png)\n\nAfter clicking `Update`, your table should now show `high_mem` for all samples in the `Preprocess Opts` column.\n\n![Fig. 11](/images/11.png)\n\nYou can set different parameters for different samples by repeating the above process. But for the test dataset, let's keep everything consistent.\n\nNext, let's modify the `Assembly Opts`. Repeat the process above, and creating a new `high_mem` setting with 6 CPUs and 60 GB of memory.\n\n![Fig. 12](/images/12.png)\n\nThe `Assembly Opts` window has more options to tinker with. In the `Assembler` dropdown menu you can choose between [GetOrganalle](https://github.com/Kinggerm/GetOrganelle) and [MitoFinder](https://github.com/RemiAllio/MitoFinder). \n\nGetOrganelle is the default assembler for MitoPilot. It is considerably faster than MitoFinder. The downside is that GetOrganelle requires good reference mitogenomes. Thankfully, there are many high-quality fish mitogenomes available. MitoFinder may be a better choice for clades with few reference sequences.\n\nYou can modify the parameters for GetOrganalle, including the seeds and labels databases. The default fish reference databases are downloaded from the MitoPilot GitHub repository. You could use custom databases by providing the full paths to the appropriate FASTA files on your local computer or cluster. \n\nLikewise, you could provide a custom `.gb` reference database for MitoFinder. The default option is the *Danio rerio* reference mitogenome (GenBank NC_002333.2).\n\nSee our [documentation](https://smithsonian.github.io/MitoPilot/articles/custom_dbs.html) for more info about custom GetOrganalle and MitoFinder databases, \n\nFor the test project, we'll stick with GetOrganalle and the default settings.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"01_init.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.26","theme":"yeti","title":"01 - initialize project"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}